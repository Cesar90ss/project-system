*   USER DOCUMENTATION

** Syscalls :

*** NAME : halt
**** SYNOPSIS :
        /nachos/code/machine/halt
**** DESCRIPTION :
        halt is a function which power off the system.


*** NAME : Exit
**** SYNOPSIS :
        void _exit(int status);
**** DESCRIPTION :
        The exit syscall is used to quit the process.It will not shut down the
        machine unless there is no other process running.
        The parameter can have two kind of values :
            - 0 in case of good terminaison.
            - a value > 0  if there is an error.


*** NAME : PutChar
**** SYNOPSIS :
        void PutChar(char c)
**** DESCRIPTION :
        PurtChar is a function which will write the character c to the console.


*** NAME : GetChar
**** SYNOPSIS :
        int GetChar()
**** DESCRIPTION :
        GetChar is a function that read a character from the input buffer.
**** RETURN :
        The character itself or EOF if there is none in the buffer.


*** NAME : PutInt
**** SYNOPSIS :
        void PutInt(int i)
**** DESCRIPTION :
        PutInt is a function which is used to write the integer i to the console.


*** NAME : GetInt
**** SYNOPSIS :
        int GetInt(int* p)
**** DESCRIPTION :
        GetInt read an int from the input buffer pointed out by p.
**** RETURN :
        - 0 if there is no error
        - -1 when the input cannot be read as an int
        - -2 when the address p cannot be written by the caller


*** NAME : PutString
**** SYNOPSIS :
        void PutString(const char s[])
**** DESCRIPTION :
        It writes the string to the console. If the string given is longer than
        MAX_STRING_SIZE then the remaining part is not printed in the console.


*** NAME : GetString
**** SYNOPSIS :
        char *GetString(char *s, int n)
**** DESCRIPTION :
        It reads at most n-1 characters in the console.
**** RETURN :
        - "s" if there is no error
        - otherwise return NULL (in case of error or EOF)


*** NAME : UserThreadCreate
**** SYNOPSIS :
        int UserThreadCreate(void f(void *arg), void *arg)
**** DESCRIPTION :
        This function create a new thread which will execute the function f with the
        argument arg.
**** RETURN :
        - 0 on success
        - -1 if no space left for stack
        - -2 if MAX_TOTAL_THREADS (20 per default) has been reach


*** NAME : UserThreadExit
**** SYNOPSIS :
        void UserThreadExit(void *ret)
**** DESCRIPTION :
        This function is used to destroy the thread and puts the return value in
        ret.
        When the main thread call UserThreadExit, other threads continue to
        run. The last thread to end will call Exit.
        When a thread function reach a return statement, it will be converted
        to this syscall with return value as argument.


*** NAME : UserThreadJoin
**** SYNOPSIS :
        int UserThreadJoin(int tid, void **retval)
**** DESCRIPTION :
        This function is used to join another thread (eg : wait for the tread
        of tid "tid" to terminate). If multiple threads tries to join on the same
        thread, only the first one will be able to join on it. The function
        will an error for the others.
        If retval is not null, it contains the return value of exit thread,
        either by calling UserThreadExit or by reaching the end of thread function.
**** RETURN :
        - 0 on success
        - -1 if bad tid
        - -2 if another thread is already joining on the same thread tid


*** NAME : UserSemaphoreCreate
**** SYNOPSIS :
        int UserSemaphoreCreate(char* name, int value)
**** DESCRIPTION :
        Initialize and return a semaphore id named "name" with an initial value "value".
        It do not create a semaphore with the id of a previously destroyed semaphore.
**** RETURN :
        - Return the id of the semaphore freshly created


*** NAME : UserSemaphoreP
**** SYNOPSIS :
        int UserSemaphoreP(int id)
**** DESCRIPTION :
        Takes the lock on the semaphore pointed by id.
**** RETURN :
        - 0 on success
        - -1 if error (semaphore does not exist)


*** NAME : UserSemaphoreV
**** SYNOPSIS :
        int UserSemaphoreV(int id)
**** DESCRIPTION :
        Release the lock (unlock) the semaphore pointed by id.
**** RETURN :
        - 0 on success
        - -1 if error (semaphore does not exist)


*** NAME : UserSemaphoreDestroy
**** SYNOPSIS :
        int UserSemaphoreDestroy(int id)
**** DESCRIPTION :
        Destroy the semaphore pointed by id.
**** RETURN :
        - 0 on success
        - -1 if error (semaphore does not exist)


*** NAME : AllocPageHeap
**** SYNOPSIS :
     int AllocPageHeap()
**** DESCRIPTION :
     AllocPageHeap asks for a new page on heap.
**** RETURN :
    - -1 if no more page for heap
    - new page addr otherwise


*** NAME : FreePageHeap
**** SYNOPSIS :
     int FreePageHeap()
**** DESCRIPTION :
     FreePageHeap gives back a new page for heap.
**** RETURN :
    The new heap top addr.


*** NAME : ForkExec
**** SYNOPSIS :
     unsigned int ForkExec(char *s)
**** DESCRIPTION :
     ForkExec creates a new process that execute the program stated in the argument s.
**** RETURN :
    - pid of this process in case of creation success
    - -1 if more than MAX_PROCESS processes have been created (by default 30)
    - -2 case of an invalid executable


*** NAME : Waitpid
**** SYNOPSIS :
     int Waitpid(unsigned int pid, int *retval)
**** DESCRIPTION :
     Waitpid wait on the process which pid is given as argument.
     If retval not NULL, the exit code of the process is put at address retval
**** RETURN :
    - -1 if process does not exist
    - -2 if process is dead
    - -3 if waiting for itself
    - 0 otherwise


*** NAME : CheckEnd
**** SYNOPSIS :
     int CheckEnd(unsigned int pid)
**** DESCRIPTION :
     CheckEnd on the process will Check if the process is ended which pid is given as argument.
**** RETURN :
    - 1 if process end
    - 0 otherwise
